import React, { createContext, useState, useEffect } from "react";
import { Cookies } from "react-cookie";
import axios from "axios";
import { useNavigate } from "react-router-dom";

export const BASKET = createContext(null);

function BasketContext({ children }) {
  const cook = new Cookies();
  const token = localStorage.getItem("token");
  const navigate = useNavigate();

  const [sebet, setSebet] = useState([]);
  const [userId, setUserId] = useState(null);
  const [orderMessage, setOrderMessage] = useState(null);
  const [loading, setLoading] = useState(false);
  const [alertMessage, setAlertMessage] = useState(null); // Add state for alert message

  // üîπ **ƒ∞stifad…ô√ßi ID-ni `Auth/profile` API-d…ôn √ß…ôkm…ôk v…ô yadda saxlamaq**
  useEffect(() => {
    const fetchUserId = async () => {
      try {
        const response = await axios.get("https://finalprojectt-001-site1.jtempurl.com/api/Auth/profile", {
          headers: {
            Authorization: `Bearer ${token}`,
            "Content-Type": "application/json",
          },
        });

        if (response.data && response.data.id) {
          setUserId(response.data.id);
        } else {
          throw new Error("ƒ∞stifad…ô√ßi ID tapƒ±lmadƒ±!");
        }
      } catch (error) {
        console.error("ƒ∞stifad…ô√ßi m…ôlumatƒ± y√ºkl…ônm…ôdi:", error);
      }
    };

    if (token) {
      fetchUserId();
    }
  }, [token]);

  // üîπ **Sebeti cookie-d…ôn oxumaq**
  useEffect(() => {
    const storedSebet = cook.get("sebet");
    if (storedSebet) {
      setSebet(storedSebet);
    }
  }, []);

  // üîπ **S…ôb…ôti `Order/create` API-y…ô g√∂nd…ôrir v…ô Order ID alƒ±r.**
  const sendToOrderAPI = async () => {
    if (!userId || sebet.length === 0) {
      setOrderMessage("‚ùå ƒ∞stifad…ô√ßi ID tapƒ±lmadƒ± v…ô ya s…ôb…ôt bo≈üdur!");
      return null;
    }

    setLoading(true);

    const productIds = sebet.map((item) => item.id);

    const orderData = new FormData();
    orderData.append("ImgUrl", "string"); // ∆èg…ôr real img URL varsa, onu yaz
    orderData.append("Title", "string"); // M…ôhsul ba≈ülƒ±ƒüƒ±nƒ± uyƒüunla≈üdƒ±ra bil…ôrik
    orderData.append("Price", sebet.reduce((acc, item) => acc + item.finalPrice * item.quantity, 0));
    orderData.append("Discount", "0");
    orderData.append("AppUserId", userId); // Burada user ID istifad…ô edirik

    // **M…ôhsul ID-l…ôrini FormData-ya …ôlav…ô etm…ôk**
    productIds.forEach((id) => orderData.append("ProductIds", id));

    try {
      const response = await axios.post(
        "https://finalprojectt-001-site1.jtempurl.com/api/Order/create",
        orderData,
        {
          headers: {
            Authorization: `Bearer ${token}`,
            "Content-Type": "multipart/form-data",
          },
        }
      );

      console.log("‚úÖ S…ôb…ôt Order API-y…ô uƒüurla g√∂nd…ôrildi:", response.data);
      setOrderMessage(`‚úÖ Order yaradƒ±ldƒ±! Order ID: ${response.data.id}`);

      // üîπ **S…ôb…ôti t…ômizl…ô**
      clearBasket();

      return response.data.id;
    } catch (error) {
      console.error("‚ùå Order API-y…ô m…ôhsul g√∂nd…ôr…ôrk…ôn x…ôta:", error);
      setOrderMessage("‚ùå Order g√∂nd…ôrilm…ôdi, xahi≈ü olunur t…ôkrar yoxlayƒ±n!");
      return null;
    } finally {
      setLoading(false);
    }
  };

  // üîπ **S…ôb…ôt…ô m…ôhsul …ôlav…ô etm…ôk**
  function bassketadd(title, about, id, imgUrl, price, discount, finalPrice, selectedSize, quantity) {
    if (!token) {
      // Set the alert message
      setAlertMessage("S…ôb…ôt…ô m…ôhsul …ôlav…ô etm…ôk √º√ß√ºn …ôvv…ôlc…ô daxil olun!");
      
      // Set a timeout to redirect after 3 seconds
      setTimeout(() => {
        setAlertMessage(null); // Clear the alert message
        navigate("/login"); // Navigate to login page after 3 seconds
      }, 3000);
      
      return;
    }

    setSebet((prevSebet) => {
      let newSebet = [...prevSebet];

      const existingProductIndex = newSebet.findIndex((item) => item.id === id);
      if (existingProductIndex !== -1) {
        newSebet[existingProductIndex] = {
          ...newSebet[existingProductIndex],
          quantity: newSebet[existingProductIndex].quantity + quantity,
        };
      } else {
        newSebet.push({ title, about, id, imgUrl, price, discount, finalPrice, selectedSize, quantity });
      }

      cook.set("sebet", newSebet, {
        path: "/",
        expires: new Date(Date.now() + 86400 * 1000),
      });

      return newSebet;
    });
  }

  // BasketContext.js faylƒ±nda …ôlav…ô edil…ôc…ôk funksiya
  function removeFromBasket(id) {
    setSebet((prevSebet) => {
      const newSebet = prevSebet.filter((item) => item.id !== id);
      
      // Cookie-ni yenil…ôyirik
      if (newSebet.length > 0) {
        cook.set("sebet", newSebet, {
          path: "/",
          expires: new Date(Date.now() + 86400 * 1000),
        });
      } else {
        cook.remove("sebet", { path: "/" });
      }
      
      return newSebet;
    });
  }

  // üîπ **S…ôb…ôti t…ômizl…ôm…ôk**
  function clearBasket() {
    setSebet([]);
    cook.remove("sebet", { path: "/" });
  }

  return (
    <BASKET.Provider value={{ sebet, bassketadd, sendToOrderAPI, clearBasket, orderMessage, loading, removeFromBasket, alertMessage }}>
      {alertMessage && (
        <div className="p-4 absolute top-[40%] left-[40%] text-sm text-red-800 rounded-lg bg-red-50 dark:bg-gray-800 dark:text-red-400" role="alert">
          <span className="font-medium">∆èziz istifad…ô√ßi</span> {alertMessage}
        </div>
      )}
      {children}
    </BASKET.Provider>
  );
}

export default BasketContext;